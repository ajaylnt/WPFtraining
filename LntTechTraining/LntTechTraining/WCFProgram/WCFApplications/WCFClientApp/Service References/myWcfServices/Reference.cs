//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFClientApp.myWcfServices {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Employee", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Employee : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DeptIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmpAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EmpIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmpNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EmpSalaryField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DeptID {
            get {
                return this.DeptIDField;
            }
            set {
                if ((this.DeptIDField.Equals(value) != true)) {
                    this.DeptIDField = value;
                    this.RaisePropertyChanged("DeptID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmpAddress {
            get {
                return this.EmpAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.EmpAddressField, value) != true)) {
                    this.EmpAddressField = value;
                    this.RaisePropertyChanged("EmpAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmpID {
            get {
                return this.EmpIDField;
            }
            set {
                if ((this.EmpIDField.Equals(value) != true)) {
                    this.EmpIDField = value;
                    this.RaisePropertyChanged("EmpID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmpName {
            get {
                return this.EmpNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EmpNameField, value) != true)) {
                    this.EmpNameField = value;
                    this.RaisePropertyChanged("EmpName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmpSalary {
            get {
                return this.EmpSalaryField;
            }
            set {
                if ((this.EmpSalaryField.Equals(value) != true)) {
                    this.EmpSalaryField = value;
                    this.RaisePropertyChanged("EmpSalary");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Dept", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Dept : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DeptIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeptNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DeptID {
            get {
                return this.DeptIDField;
            }
            set {
                if ((this.DeptIDField.Equals(value) != true)) {
                    this.DeptIDField = value;
                    this.RaisePropertyChanged("DeptID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeptName {
            get {
                return this.DeptNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeptNameField, value) != true)) {
                    this.DeptNameField = value;
                    this.RaisePropertyChanged("DeptName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="myWcfServices.IEmpService")]
    public interface IEmpService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/GetAllEmployees", ReplyAction="http://tempuri.org/IEmpService/GetAllEmployeesResponse")]
        System.Collections.Generic.List<WCFClientApp.myWcfServices.Employee> GetAllEmployees();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/GetAllEmployees", ReplyAction="http://tempuri.org/IEmpService/GetAllEmployeesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCFClientApp.myWcfServices.Employee>> GetAllEmployeesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/AddNewEmployee", ReplyAction="http://tempuri.org/IEmpService/AddNewEmployeeResponse")]
        bool AddNewEmployee(WCFClientApp.myWcfServices.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/AddNewEmployee", ReplyAction="http://tempuri.org/IEmpService/AddNewEmployeeResponse")]
        System.Threading.Tasks.Task<bool> AddNewEmployeeAsync(WCFClientApp.myWcfServices.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/DeleteEmployee", ReplyAction="http://tempuri.org/IEmpService/DeleteEmployeeResponse")]
        bool DeleteEmployee(int empID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/DeleteEmployee", ReplyAction="http://tempuri.org/IEmpService/DeleteEmployeeResponse")]
        System.Threading.Tasks.Task<bool> DeleteEmployeeAsync(int empID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/UpdateEmployee", ReplyAction="http://tempuri.org/IEmpService/UpdateEmployeeResponse")]
        bool UpdateEmployee(WCFClientApp.myWcfServices.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/UpdateEmployee", ReplyAction="http://tempuri.org/IEmpService/UpdateEmployeeResponse")]
        System.Threading.Tasks.Task<bool> UpdateEmployeeAsync(WCFClientApp.myWcfServices.Employee emp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/GetAllDepartments", ReplyAction="http://tempuri.org/IEmpService/GetAllDepartmentsResponse")]
        System.Collections.Generic.List<WCFClientApp.myWcfServices.Dept> GetAllDepartments();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmpService/GetAllDepartments", ReplyAction="http://tempuri.org/IEmpService/GetAllDepartmentsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WCFClientApp.myWcfServices.Dept>> GetAllDepartmentsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmpServiceChannel : WCFClientApp.myWcfServices.IEmpService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmpServiceClient : System.ServiceModel.ClientBase<WCFClientApp.myWcfServices.IEmpService>, WCFClientApp.myWcfServices.IEmpService {
        
        public EmpServiceClient() {
        }
        
        public EmpServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmpServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmpServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmpServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<WCFClientApp.myWcfServices.Employee> GetAllEmployees() {
            return base.Channel.GetAllEmployees();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCFClientApp.myWcfServices.Employee>> GetAllEmployeesAsync() {
            return base.Channel.GetAllEmployeesAsync();
        }
        
        public bool AddNewEmployee(WCFClientApp.myWcfServices.Employee emp) {
            return base.Channel.AddNewEmployee(emp);
        }
        
        public System.Threading.Tasks.Task<bool> AddNewEmployeeAsync(WCFClientApp.myWcfServices.Employee emp) {
            return base.Channel.AddNewEmployeeAsync(emp);
        }
        
        public bool DeleteEmployee(int empID) {
            return base.Channel.DeleteEmployee(empID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteEmployeeAsync(int empID) {
            return base.Channel.DeleteEmployeeAsync(empID);
        }
        
        public bool UpdateEmployee(WCFClientApp.myWcfServices.Employee emp) {
            return base.Channel.UpdateEmployee(emp);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateEmployeeAsync(WCFClientApp.myWcfServices.Employee emp) {
            return base.Channel.UpdateEmployeeAsync(emp);
        }
        
        public System.Collections.Generic.List<WCFClientApp.myWcfServices.Dept> GetAllDepartments() {
            return base.Channel.GetAllDepartments();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WCFClientApp.myWcfServices.Dept>> GetAllDepartmentsAsync() {
            return base.Channel.GetAllDepartmentsAsync();
        }
    }
}
